/**
***
*** Copyright (c) 2013 - 2019 Intel Corporation. All Rights Reserved.
***
*** The information and source code contained herein is the exclusive
*** property of Intel Corporation. and may not be disclosed, examined
*** or reproduced in whole or in part without explicit written authorization
*** from the company.
***
*** ----------------------------------------------------------------------------
**/
using System.Runtime.InteropServices;
using System.IO;

namespace DALSamplesServer
{
    /**
    * Contains all data structures needed for communication with Sigma Sample.
    **/
    class SigmaDataStructs
    {

        #region Constants

        private static byte SIGM_API_VERSION_MAJOR_1_1 = 3;
        private static byte SIGMA_API_VERSION_MINOR_1_1 = 0;
        public static int SIGMA_API_VERSION_1_1 = ((SIGM_API_VERSION_MAJOR_1_1 << 16) | (SIGMA_API_VERSION_MINOR_1_1));

        public const int SIGMA_S1_MSG_LEN = 104;
        public const short SIGMA_KEY_LENGTH = 64;
        public const int ECDSA_SIGNATURE_LEN = 64;
        public const short SIGMA_HMAC_LENGTH = 32;
        public const int SIGMA_PUBLIC_KEY_LEN = 64;
        public const byte BASE_NAME_LENGTH = 32;
        public const byte OCSP_NONCE_LENGTH = 32;
        public const short SIGMA_SMK_LENGTH = 32;
        public const int SIGMA_MAC_LEN = 32;
        public const int SIGMA_SESSION_KEY_LEN = 16;
        public const int SIGMA_MAC_KEY_LEN = 16;
        public const int EPID_SIG_LEN = 569;
        public const byte SIGRL_BK_SIZE = 128;

        #endregion

        #region Certificates files

        public static string SIGNED_OCSP_CERT_FILE = "..\\..\\epid_data\\signed_ocsp_signed.cer"; //cert of ocsp responder
        public static string SIGNED_CERT_1_1_FILE_NAME = "..\\..\\epid_data\\SignedX509Cert.cer";
        public static string VERIFIER_CERT_X509_FILE = "..\\..\\epid_data\\VerifierPubCert.cer";
        public static string SIGNED_KEY_1_1_FILE_NAME = "..\\..\\epid_data\\SignedX509CertPrivateKey.der";
        public static string VERIFIER_PRIVATE_KEY_X509_FILE = "..\\..\\epid_data\\VerifierPrivKey.dat";

        #endregion

        public enum OcspRequestType
        {
            NoOcsp = 0,
            Cached = 1,
            NonCached = 2,
            MaxOcspType = 3
        }

        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        public struct OcspRequest
        {
            public OcspRequestType ReqType;
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = OCSP_NONCE_LENGTH)]
            public byte[] OcspNonce;
        }

        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        public struct SigmaS1Message
        {
            // 64 byte Public Key generated by Intel ME FW for the session
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = SIGMA_KEY_LENGTH)]
            public byte[] Ga;

            // EPID Group the Intel ME FW belongs to
            public uint Gid;

            // Used to notify the verifier whether cached or non-cached OCSP verification is required
            public OcspRequest OcspReq;
        }

        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        public struct SigmaS2Message
        {
            // Signature of [Ga || Gb] using verifier ECDSA private key 
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = ECDSA_SIGNATURE_LEN)]
            public byte[] SigGaGb;

            // HMAC_SHA256 of [Gb || Basename || OCSP Req || Verifier Cert ||  Sig-RL List ], using SMK
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = SIGMA_HMAC_LENGTH)]
            public byte[] S2Icv;

            // 64 byte Public Key generated by verifier for the session
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = SIGMA_PUBLIC_KEY_LEN)]
            public byte[] Gb;

            // Basename is 32 bytes
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = BASE_NAME_LENGTH)]
            public byte[] Basename;

            // OCSP request sent in S1
            public OcspRequest OcspReq;
        }

        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        public struct SigmaS3Message
        {
            // HMAC_SHA256 of [TaskInfo || ga || Epid Cert || Epid Signature || Sig-RL header || NrProofs ] using SMK
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = SIGMA_HMAC_LENGTH)]
            public byte[] S3Icv;

            // Task Info contents for Intel ME FW. Sigma users can populate RsvdforApp for application specific data.
            public DataStructs.IntelMETaskInfo TaskInfo;

            // Session Key generated by Intel ME FW and sent during S1
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = SIGMA_PUBLIC_KEY_LEN)]
            public byte[] Ga;

            // Data contains EPID Cert + Epid Signature of [Ga || Gb] +  SIG_RL_HEADER  + NrProofs (if there are entries in Sig-RL. Each NR proof is 160 bytes) 
            [MarshalAs(UnmanagedType.ByValArray)]
            public byte[] data;
        }

        public struct OCSPRequestInfo
        {
            public string urlOcspResponder;		// OCSP Responder URL
            public string certName;				// Verifier Certificate Name
            public string issuerName;			    // Verifier Issuer Certificate Name
            public string ocspResponderCertName;	// OCSP Responder Certificate Name to verify OCSP response
            public string proxyHostName;     // OCSP Proxy
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = OCSP_NONCE_LENGTH)]
            public byte[] ocspNonce;    // OCSP nonce
        }

        /**
         * X509 3P certificate SIGMA 1.1
         */
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        public struct X509VerifierCert
        {
            public DataStructs.VlrHeader vlrHeader;
            [MarshalAs(UnmanagedType.ByValArray)]
            public byte[] CertData;
        }

        #region SIGMA 1.1 signed certificates

        /**
         * Verifier's certificate
         */
        public static byte[] Sigma11_3PSignedCert
        {
            get
            {
                return File.ReadAllBytes(SIGNED_CERT_1_1_FILE_NAME);
            }
        }

        /**
         * Verifier's private key
         */
        public static byte[] Sigma11_Signed3PKey
        {
            get
            {
                return File.ReadAllBytes(SIGNED_KEY_1_1_FILE_NAME);
            }
        }

        #endregion
    }
}
