/**
***
*** Copyright (c) 2013 - 2019 Intel Corporation. All Rights Reserved.
***
*** The information and source code contained herein is the exclusive
*** property of Intel Corporation. and may not be disclosed, examined
*** or reproduced in whole or in part without explicit written authorization
*** from the company.
***
*** ----------------------------------------------------------------------------
**/
using System;
using System.Net.Sockets;
using System.IO;
using DALSamplesServer.Utils;

namespace DALSamplesServer.Handlers
{
    class EPIDSigningHandler : SampleHandler
    {
        private bool isClientConnected;

        // Result codes
        private const int ERROR = -1;
        private const int VERIFYNG_SUCCESS = 0;
        private const int VERIFYNG_FAILED = 1;

        public override void HandleClientCommunication(object client)
        {
            try
            {
                TcpClient tcpClient = (TcpClient)client;
                Socket socket = tcpClient.Client;

                isClientConnected = socket.Connected;
                while (isClientConnected)
                {
                    // Receive adapted message (message prepared for verification)
                    int dataSize = socket.ReceiveMessageAsInt();
                    byte[] adaptedMessage = socket.ReceiveMessage(dataSize);

                    // Receive signature
                    dataSize = socket.ReceiveMessageAsInt();
                    byte[] signature = socket.ReceiveMessage(dataSize);

                    // Receive EPID group ID
                    int groupID = socket.ReceiveMessageAsInt();

                    // groupCert contains the SIGMA 1.1 certificate for the specific EPID group ID
                    byte[] groupCert = SigmaUtils.GetSpecificEpidCertificate_SIGMA_1_0((uint)groupID);
                    // epidParamsCert contains the mathematic parameters
                    byte[] epidParamsCert = File.ReadAllBytes(EPIDDataStructs.DEBUG_SIGNED_BIN_PARAMS_CERT_FILE);

                    // taskInfoArray is a data structure defined in the DAL implementation. 
                    // It is prepended to the message by DAL prior to signing,
                    // and so has to be prepended by us prior to verification
                    byte[] taskInfoArray = GeneralUtils.StructureToByteArray(EPIDDataStructs.GetTaskInfo());
                    byte[] infoNonceMessage = new byte[taskInfoArray.Length + adaptedMessage.Length]; //TaskInfo || Nonce || Message

                    // Concatenate the info to infoNonceMessage
                    taskInfoArray.CopyTo(infoNonceMessage, 0);
                    // Concatenate the adapted message(including the nonce) to infoNonceMessage
                    adaptedMessage.CopyTo(infoNonceMessage, taskInfoArray.Length);

                    // Verify the signature
                    // When we call the MessageVerifyPch function, we can send
                    //   baseName - the basename that will be signed as part of the signature
                    //   privateKeyRevList - a list of the platforms that were revoked based on the platform’s private key
                    //   SignatureRevList - a list of the platforms that were revoked based on the signature generated by the platform
                    //   GroupRevList - a list of the EPID groups that were revoked based on the group public key
                    // as parameters.
                    CdgResult retStatus;
                    CdgStatus status = CryptoDataGenWrapper.MessageVerifyPch(groupCert, groupCert.Length, epidParamsCert, infoNonceMessage, infoNonceMessage.Length, null, 0, signature, signature.Length, out retStatus, null, null, null);

                    int res = VERIFYNG_SUCCESS;
                    if (status != CdgStatus.CdgStsOk)
                        res = ERROR;
                    else if (retStatus != CdgResult.CdgValid)
                        res = VERIFYNG_FAILED;

                    // Send the signature verification result to the client
                    socket.SendInt(res);
                }

                Console.WriteLine("EPID Signing Sample Client disconnected.\n");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

    }
}












